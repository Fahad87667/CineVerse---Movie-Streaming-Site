CRUD Operations in Movie Project
==============================

1. CREATE (Add to Liked Movies)
------------------------------
Frontend (movie-slice.js):
```javascript
export const addToLikedMovies = createAsyncThunk(
  "movie/addToLikedMovies",
  async ({ email, movie }, { rejectWithValue }) => {
    try {
      const response = await api.post("/users/add", {
        email,
        movie,
      });
      return response.data.user.likedMovies;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || "Failed to add movie to liked list");
    }
  }
);
```

Backend (UserControl.js):
```javascript
module.exports.addtoLikedMovies = async (req, res) => {
  try {
    const { email, movie } = req.body;
    const user = await User.findOne({ email });
    
    if (user) {
      // Check if movie already exists
      const movieExists = user.likedMovies.find((m) => m.id === movie.id);
      if (movieExists) {
        return res.status(200).json({ message: "Movie already liked", user });
      }
      // Add new movie to liked list
      const updatedUser = await User.findByIdAndUpdate(
        user._id,
        { $push: { likedMovies: movie } },
        { new: true }
      );
      return res.status(200).json({ message: "Movie added to liked movies", user: updatedUser });
    } else {
      // Create new user with liked movie
      const newUser = await User.create({ email, likedMovies: [movie] });
      return res.status(201).json({ message: "User created and movie added", user: newUser });
    }
  } catch (err) {
    return res.status(500).json({ message: "Something went wrong", error: err.message });
  }
};
```

2. READ (Get Liked Movies)
-------------------------
Frontend (movie-slice.js):
```javascript
export const getUserLikedMovies = createAsyncThunk(
  "movie/getUserLikedMovies",
  async (email, { rejectWithValue }) => {
    try {
      const response = await api.get(`/users/liked/${email}`);
      return response.data.movies;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || "Failed to fetch liked movies");
    }
  }
);
```

Backend (UserControl.js):
```javascript
module.exports.getLikedMovies = async (req, res) => {
  try {
    const { email } = req.params;
    const user = await User.findOne({ email });
    
    if (user) {
      return res.status(200).json({ message: "Success", movies: user.likedMovies });
    }
    return res.status(404).json({ message: "User not found" });
  } catch (err) {
    return res.status(500).json({ message: "Something went wrong", error: err.message });
  }
};
```

3. UPDATE (Remove from Liked Movies)
----------------------------------
Frontend (movie-slice.js):
```javascript
export const removeLikedMovie = createAsyncThunk(
  "movie/removeLikedMovie",
  async ({ email, movieId }, { rejectWithValue }) => {
    try {
      const response = await api.put("/users/remove", {
        email,
        movie: { id: movieId },
      });
      return response.data.user.likedMovies;
    } catch (error) {
      return rejectWithValue(error.response?.data?.message || "Failed to remove movie from liked list");
    }
  }
);
```

Backend (UserControl.js):
```javascript
module.exports.removeFromLikedMovies = async (req, res) => {
  try {
    const { email, movie } = req.body;
    const user = await User.findOne({ email });
    
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    // Remove movie from liked list
    const updatedUser = await User.findByIdAndUpdate(
      user._id,
      { $pull: { likedMovies: { id: movie.id } } },
      { new: true }
    );

    return res.status(200).json({
      message: "Movie removed from liked movies",
      user: updatedUser,
    });
  } catch (err) {
    return res.status(500).json({ message: "Something went wrong", error: err.message });
  }
};
```

4. DELETE (Not directly implemented but handled through Update)
-----------------------------------------------------------
- The project doesn't have a direct delete operation for users
- Instead, it uses the update operation to remove movies from the liked list
- This is a common pattern in many applications where you want to maintain user data but remove specific items

Data Flow
=========
1. User clicks like button on a movie
2. Frontend sends POST request to `/users/add`
3. Backend:
   - Checks if user exists
   - If exists, adds movie to liked list
   - If not, creates new user with liked movie
4. Frontend updates Redux state with new liked movies list

Error Handling
=============
- Frontend uses try-catch blocks and Redux's rejectWithValue
- Backend uses try-catch blocks and appropriate HTTP status codes
- Both sides provide meaningful error messages

State Management
===============
- Redux handles the state updates through:
  - `addToLikedMovies.fulfilled`
  - `removeLikedMovie.fulfilled`
  - `getUserLikedMovies.fulfilled`
- Each operation updates the `likedMovies` array in the Redux store

Security
========
- API calls include authentication token in headers
- Backend validates user existence before operations
- Proper error handling prevents unauthorized access

This CRUD implementation follows RESTful principles and provides a complete solution for managing liked movies in your application.

Movie Loading and API Structure
=============================

1. TMDB API Integration
----------------------
The project uses The Movie Database (TMDB) API for fetching movie data:
- Base URL: https://api.themoviedb.org/3
- API Key: Required for authentication
- Endpoints used:
  * /trending/movie/week - For trending movies
  * /genre/movie/list - For movie genres
  * /discover/movie - For genre-specific movies
  * /search/movie - For movie search
  * /movie/{id}/videos - For movie trailers

2. Movie Data Structure
----------------------
```javascript
{
  id: number,          // Movie ID from TMDB
  name: string,        // Movie title
  image: string,       // Backdrop path
  poster: string,      // Poster path
  genres: string[],    // Array of genre names
  backdrop_path: string, // Full backdrop URL
  poster_path: string,  // Full poster URL
  genre_ids: number[]  // Array of genre IDs
}
```

3. Data Loading Process
----------------------
a) Initial Load:
```javascript
// 1. Fetch Genres
const getGenres = createAsyncThunk("movie/getGenres", async () => {
  const { data: { genres } } = await axios.get(
    `${TMDB_BASE_URL}/genre/movie/list?api_key=${API_KEY}`
  );
  return genres;
});

// 2. Fetch Movies
const fetchMovies = createAsyncThunk("movie/fetchMovies", async (_, { getState }) => {
  const { movie: { genres } } = getState();
  const movies = await getRawData(
    `${TMDB_BASE_URL}/trending/movie/week?api_key=${API_KEY}`,
    genres,
    true
  );
  return movies;
});
```

b) Data Processing:
```javascript
const createArrayFromRawData = (array, moviesArray, genres) => {
  array.forEach((movie) => {
    const movieGenres = [];
    movie.genre_ids.forEach((genre) => {
      const name = genres.find(({ id }) => id === genre);
      if (name) movieGenres.push(name.name);
    });

    moviesArray.push({
      id: movie.id,
      name: movie?.original_name || movie?.original_title || movie?.title,
      image: movie.backdrop_path,
      poster: movie.poster_path,
      genres: movieGenres.slice(0, 3)
    });
  });
};
```

4. Image Handling
----------------
- Base URL for images: https://image.tmdb.org/t/p/original
- Image paths are stored in the movie object
- Full image URL is constructed by combining base URL and path
- Different sizes available:
  * original
  * w500
  * w780
  * w1280

5. State Management for Movies
----------------------------
```javascript
const initialState = {
  movies: [],          // All movies
  genres: [],          // All genres
  status: "idle",      // Loading status
  error: null,         // Error state
  likedMovies: [],     // User's liked movies
  searchedMovies: []   // Search results
};
```

6. API Calls Structure
---------------------
a) Trending Movies:
```javascript
`${TMDB_BASE_URL}/trending/movie/week?api_key=${API_KEY}`
```

b) Genre-specific Movies:
```javascript
`${TMDB_BASE_URL}/discover/movie?api_key=${API_KEY}&with_genres=${genre}`
```

c) Movie Search:
```javascript
`${TMDB_BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`
```

d) Movie Trailer:
```javascript
`${TMDB_BASE_URL}/movie/${movie.id}/videos?api_key=${API_KEY}`
```

7. Error Handling
----------------
- API rate limiting
- Network errors
- Invalid API responses
- Missing data handling
- Fallback images for missing posters

8. Performance Considerations
---------------------------
- Pagination for large datasets
- Image lazy loading
- Caching of API responses
- Debouncing of search requests
- Optimized re-renders using Redux

This movie loading system provides a robust foundation for displaying and managing movie data in the application, with proper error handling and performance optimizations. 